{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// The annotated layout is generally used on a settings page to let merchants easily set up, enable, or disable functions of an app. \n// It’s set up in sections that include titles and descriptions to help merchants understand the groupings of content.\nimport { Button, Card, Form, FormLayout, Layout, Page, SettingToggle, Stack, TextField, TextStyle } from '@shopify/polaris';\n\nvar AnnotatedLayout =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnnotatedLayout, _React$Component);\n\n  function AnnotatedLayout() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AnnotatedLayout);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AnnotatedLayout)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      discount: '10%',\n      enabled: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function () {\n      _this.setState({\n        discount: _this.state.discount\n      });\n\n      console.log('submission', _this.state);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (field) {\n      return function (value) {\n        return _this.setState(_defineProperty({}, field, value));\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggle\", function () {\n      _this.setState(function (_ref) {\n        var enabled = _ref.enabled;\n        return {\n          enabled: !enabled\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(AnnotatedLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          discount = _this$state.discount,\n          enabled = _this$state.enabled;\n      var contentStatus = enabled ? 'Disable' : 'Enable';\n      var textStatus = enabled ? 'enabled' : 'disabled';\n      return __jsx(Page, null, __jsx(Layout, null, __jsx(Layout.AnnotatedSection, {\n        title: \"Default discount\",\n        description: \"Add a product to Sample App, it will automatically be discounted.\"\n      }, __jsx(Card, {\n        sectioned: true\n      }, __jsx(Form, {\n        onSubmit: this.handleSubmit\n      }, __jsx(FormLayout, null, __jsx(TextField, {\n        value: discount,\n        onChange: this.handleChange('discount'),\n        label: \"Discount percentage\",\n        type: \"discount\"\n      }), __jsx(Stack, {\n        distribution: \"trailing\"\n      }, __jsx(Button, {\n        primary: true,\n        submit: true\n      }, \"Save\")))))), __jsx(Layout.AnnotatedSection, {\n        title: \"Price updates\",\n        description: \"Temporarily disable all Sample App price updates\"\n      }, __jsx(SettingToggle, {\n        action: {\n          content: contentStatus,\n          onAction: this.handleToggle\n        },\n        enabled: enabled\n      }, \"This setting is\", ' ', __jsx(TextStyle, {\n        variation: \"strong\"\n      }, textStatus), \".\"))));\n    }\n  }]);\n\n  return AnnotatedLayout;\n}(React.Component);\n\nexport default AnnotatedLayout;","map":{"version":3,"sources":["/Users/lloydchambrier/Documents/Projects/build-second-shopify-app/pages/annotated-layout.js"],"names":["Button","Card","Form","FormLayout","Layout","Page","SettingToggle","Stack","TextField","TextStyle","AnnotatedLayout","discount","enabled","setState","state","console","log","field","value","contentStatus","textStatus","handleSubmit","handleChange","content","onAction","handleToggle","React","Component"],"mappings":";;;;;;;;;AAAA;AACA;AACA,SACIA,MADJ,EAEIC,IAFJ,EAGIC,IAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,IANJ,EAOIC,aAPJ,EAQIC,KARJ,EASIC,SATJ,EAUIC,SAVJ,QAWS,kBAXT;;IAaQC,e;;;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;mEAuDO,YAAM;AACnB,YAAKC,QAAL,CAAc;AACZF,QAAAA,QAAQ,EAAE,MAAKG,KAAL,CAAWH;AADT,OAAd;;AAGAI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,MAAKF,KAA/B;AACD,K;;mEAEc,UAACG,KAAD,EAAW;AACxB,aAAO,UAACC,KAAD;AAAA,eAAW,MAAKL,QAAL,qBAAiBI,KAAjB,EAAyBC,KAAzB,EAAX;AAAA,OAAP;AACD,K;;mEAEc,YAAM;AACjB,YAAKL,QAAL,CAAc,gBAAiB;AAAA,YAAdD,OAAc,QAAdA,OAAc;AAC7B,eAAO;AAAEA,UAAAA,OAAO,EAAE,CAACA;AAAZ,SAAP;AACD,OAFD;AAGD,K;;;;;;;6BAjEM;AAAA,wBACyB,KAAKE,KAD9B;AAAA,UACGH,QADH,eACGA,QADH;AAAA,UACaC,OADb,eACaA,OADb;AAEL,UAAMO,aAAa,GAAGP,OAAO,GAAG,SAAH,GAAe,QAA5C;AACA,UAAMQ,UAAU,GAAGR,OAAO,GAAG,SAAH,GAAe,UAAzC;AAEF,aACE,MAAC,IAAD,QACE,MAAC,MAAD,QACE,MAAC,MAAD,CAAQ,gBAAR;AACE,QAAA,KAAK,EAAC,kBADR;AAEE,QAAA,WAAW,EAAC;AAFd,SAIE,MAAC,IAAD;AAAM,QAAA,SAAS;AAAf,SACE,MAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKS;AAArB,SACE,MAAC,UAAD,QACE,MAAC,SAAD;AACE,QAAA,KAAK,EAAEV,QADT;AAEE,QAAA,QAAQ,EAAE,KAAKW,YAAL,CAAkB,UAAlB,CAFZ;AAGE,QAAA,KAAK,EAAC,qBAHR;AAIE,QAAA,IAAI,EAAC;AAJP,QADF,EAOE,MAAC,KAAD;AAAO,QAAA,YAAY,EAAC;AAApB,SACE,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,MAAM;AAAtB,gBADF,CAPF,CADF,CADF,CAJF,CADF,EAuBE,MAAC,MAAD,CAAQ,gBAAR;AACA,QAAA,KAAK,EAAC,eADN;AAEA,QAAA,WAAW,EAAC;AAFZ,SAIA,MAAC,aAAD;AACE,QAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,EAAEJ,aADH;AAENK,UAAAA,QAAQ,EAAE,KAAKC;AAFT,SADV;AAKE,QAAA,OAAO,EAAEb;AALX,4BAOkB,GAPlB,EAQE,MAAC,SAAD;AAAW,QAAA,SAAS,EAAC;AAArB,SAA+BQ,UAA/B,CARF,MAJA,CAvBF,CADF,CADF;AA2CD;;;;EAtD2BM,KAAK,CAACC,S;;AA0EpC,eAAejB,eAAf","sourcesContent":["// The annotated layout is generally used on a settings page to let merchants easily set up, enable, or disable functions of an app. \n// It’s set up in sections that include titles and descriptions to help merchants understand the groupings of content.\nimport {\n    Button,\n    Card,\n    Form,\n    FormLayout,\n    Layout,\n    Page,\n    SettingToggle,\n    Stack,\n    TextField,\n    TextStyle\n  } from '@shopify/polaris';\n  \n  class AnnotatedLayout extends React.Component {\n    state = {\n      discount: '10%',\n      enabled: false\n    };\n  \n    render() {\n        const { discount, enabled } = this.state;\n        const contentStatus = enabled ? 'Disable' : 'Enable';\n        const textStatus = enabled ? 'enabled' : 'disabled';\n  \n      return (\n        <Page>\n          <Layout>\n            <Layout.AnnotatedSection\n              title=\"Default discount\"\n              description=\"Add a product to Sample App, it will automatically be discounted.\"\n            >\n              <Card sectioned>\n                <Form onSubmit={this.handleSubmit}>\n                  <FormLayout>\n                    <TextField\n                      value={discount}\n                      onChange={this.handleChange('discount')}\n                      label=\"Discount percentage\"\n                      type=\"discount\"\n                    />\n                    <Stack distribution=\"trailing\">\n                      <Button primary submit>\n                        Save\n                      </Button>\n                    </Stack>\n                  </FormLayout>\n                </Form>\n              </Card>\n            </Layout.AnnotatedSection>\n            <Layout.AnnotatedSection\n            title=\"Price updates\"\n            description=\"Temporarily disable all Sample App price updates\"\n          >\n            <SettingToggle\n              action={{\n                content: contentStatus,\n                onAction: this.handleToggle,\n              }}\n              enabled={enabled}\n            >\n              This setting is{' '}\n              <TextStyle variation=\"strong\">{textStatus}</TextStyle>.\n            </SettingToggle>\n          </Layout.AnnotatedSection>\n          </Layout>\n        </Page>\n      );\n    }\n  \n    handleSubmit = () => {\n      this.setState({\n        discount: this.state.discount,\n      });\n      console.log('submission', this.state);\n    };\n  \n    handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n    };\n\n    handleToggle = () => {\n        this.setState(({ enabled }) => {\n          return { enabled: !enabled };\n        });\n      };\n  }\n  \n  export default AnnotatedLayout;"]},"metadata":{},"sourceType":"module"}